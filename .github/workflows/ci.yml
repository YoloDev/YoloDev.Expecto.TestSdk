name: CI

on:
  - push
  - pull_request

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        # Check https://github.com/dotnet/core/blob/master/release-notes/releases-index.json for updates
        dotnet:
          - "2.1.805" # Latest 2.1
          - "2.2.207" # Latest 2.2
          - "3.0.103" # Latest 3.0
          - "3.1.201" # Latest 3.1

    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: "true"
      DOTNET_CLI_TELEMETRY_OPTOUT: "1"

    steps:
      - name: Setup dotnet 2.1
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "2.1.805"

      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ matrix.dotnet }}

      - name: Setup side by side .NET SDKs on Windows
        if: matrix.os == 'windows-latest'
        run: |
          SET DOTNET_21_ROOT=%DOTNET_ROOT:${{ matrix.dotnet }}=2.1.805%
          xcopy /s /y /d %DOTNET_31_ROOT% %DOTNET_ROOT%
        shell: cmd

      - name: Setup side by side .NET SDKs on *nix
        if: matrix.os != 'windows-latest'
        run: rsync -a ${DOTNET_ROOT/${{ matrix.dotnet }}/2.1.805}/* $DOTNET_ROOT/

      - name: Print dotnet info
        run: dotnet --info

      - uses: actions/checkout@master
      - name: Fetch all history for all tags and branches
        run: git fetch --prune --unshallow

      - name: Output version
        run: bash ./script/git-version.sh --verbose get

      - name: Restore
        run: dotnet msbuild build/build.proj -target:Restore -v:d

      - name: Build
        run: dotnet msbuild build/build.proj -target:Build -p:NoRestore=true -v:d

      - name: Test
        run: dotnet msbuild build/build.proj -target:Test -p:NoRestore=true -p:VSTestNoBuild=true -v:d

  pack:
    name: Create package
    runs-on: ubuntu-latest
    needs:
      - test

    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: "true"
      DOTNET_CLI_TELEMETRY_OPTOUT: "1"

    steps:
      - name: Setup dotnet 2.1
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "2.1.805"

      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "3.1.201"

      - name: Setup side by side .NET SDKs on *nix
        run: rsync -a ${DOTNET_ROOT/3.1.201/2.1.805}/* $DOTNET_ROOT/

      - name: Print dotnet info
        run: dotnet --info

      - uses: actions/checkout@master
      - name: Fetch all history for all tags and branches
        run: git fetch --prune --unshallow

      - name: Output version
        run: bash ./script/git-version.sh --verbose get

      - name: Restore
        run: dotnet msbuild build/build.proj -target:Restore -v:d

      - name: Create nuget packages
        run: dotnet msbuild build/build.proj -target:Pack -v:d

      - name: Upload nuget packages as artifact
        uses: actions/upload-artifact@v1
        with:
          name: packages
          path: artifacts

  publish:
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')
    name: Publish package
    runs-on: ubuntu-latest
    needs:
      - pack

    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: "true"
      DOTNET_CLI_TELEMETRY_OPTOUT: "1"

    steps:
      - name: Setup dotnet 2.1
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "2.1.805"

      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "3.1.201"

      - name: Setup side by side .NET SDKs on *nix
        run: rsync -a ${DOTNET_ROOT/3.1.201/2.1.805}/* $DOTNET_ROOT/

      - name: Print dotnet info
        run: dotnet --info

      - name: Download packages artifact
        uses: actions/download-artifact@v1
        with:
          name: packages

      - name: List packages
        run: ls -la packages

      - name: Push to MyGet
        run: |
          for pkg in packages/*.nupkg packages/*.snupkg; do
            dotnet nuget push "$pkg" -s "https://www.myget.org/F/yolodev/api/v3/index.json" -ss "https://www.myget.org/F/yolodev/api/v3/index.json" -k "$MYGET_KEY"
          done
        env:
          MYGET_KEY: ${{ secrets.MYGET_KEY }}
