name: CI

on:
  - push
  - pull_request

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: "true"
      DOTNET_CLI_TELEMETRY_OPTOUT: "1"

    steps:
      - name: Setup dotnet 2.1
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "2.1.805"

      - name: Setup dotnet 5.0
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "5.0.101"

      - name: Setup side by side .NET SDKs on *nix
        run: |
          rsync -a ${DOTNET_ROOT/${{ matrix.dotnet }}/2.1.805}/* $DOTNET_ROOT/

      - name: Print dotnet info
        run: dotnet --info

      - uses: actions/checkout@master

      - name: Fetch all history for all tags and branches
        run: git fetch --prune --unshallow

      - name: Restore
        run: dotnet msbuild build/build.proj -target:Restore

      - name: Build
        run: dotnet msbuild build/build.proj -target:Build -p:NoRestore=true

      - name: Test
        run: dotnet msbuild build/build.proj -target:Test -p:NoRestore=true -p:VSTestNoBuild=true

      - name: Pack
        run: dotnet msbuild build/build.proj -target:Pack

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: package
          retention-days: 5
          path: |
            artifacts/*.nupkg
            artifacts/*.snupkg

  test:
    name: Test
    needs:
      - build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-latest
          # - windows-latest see https://github.com/NuGet/Home/issues/7413
          - ubuntu-latest
        tfm:
          - "netcoreapp2.1"
          - "netcoreapp3.1"
          - "net5.0"
        include:
          - tfm: "netcoreapp3.1"
            dotnet: "3.1.404"

    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: "true"
      DOTNET_CLI_TELEMETRY_OPTOUT: "1"

    steps:
      - name: Setup dotnet 2.1
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "2.1.805"

      - name: Setup dotnet ${{ matrix.dotnet }}
        if: ${{ matrix.dotnet }} != ''
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ matrix.dotnet }}

      - name: Setup dotnet 5.0
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "5.0.101"

      - name: Print dotnet info
        run: dotnet --info

      - uses: actions/checkout@master

      - name: Download package
        uses: actions/download-artifact@v2
        with:
          name: package
          path: ~/packages/YoloDev.Expecto.TestSdk

      - name: Display structure of downloaded files
        run: ls -R ~/packages/YoloDev.Expecto.TestSdk
        shell: pwsh

      - name: Restore test project with local package
        run: |
          $local = Resolve-Path ~/packages/YoloDev.Expecto.TestSdk
          $remote = "https://api.nuget.org/v3/index.json"
          # Write-Host $local
          # Write-Host $remote
          dotnet restore -s "$local;$remote" test/Sample.Test -p:CiTestTfm=${{ matrix.tfm }}
        shell: pwsh

      - name: Build test project
        run: dotnet build --no-restore test/Sample.Test -p:CiTestTfm=${{ matrix.tfm }}
        shell: pwsh

      - name: Test project
        run: dotnet test --no-build --no-restore test/Sample.Test -p:CiTestTfm=${{ matrix.tfm }}
        shell: pwsh

  # publish:
  #   if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')
  #   name: Publish package
  #   runs-on: ubuntu-latest
  #   needs:
  #     - pack

  #   env:
  #     DOTNET_SKIP_FIRST_TIME_EXPERIENCE: "true"
  #     DOTNET_CLI_TELEMETRY_OPTOUT: "1"

  #   steps:
  #     - name: Setup dotnet 2.1
  #       uses: actions/setup-dotnet@v1
  #       with:
  #         dotnet-version: "2.1.805"

  #     - name: Setup dotnet
  #       uses: actions/setup-dotnet@v1
  #       with:
  #         dotnet-version: "3.1.201"

  #     - name: Setup side by side .NET SDKs on *nix
  #       run: rsync -a ${DOTNET_ROOT/3.1.201/2.1.805}/* $DOTNET_ROOT/

  #     - name: Print dotnet info
  #       run: dotnet --info

  #     - name: Download packages artifact
  #       uses: actions/download-artifact@v1
  #       with:
  #         name: packages

  #     - name: List packages
  #       run: ls -la packages

  #     - name: Push to MyGet
  #       run: |
  #         for pkg in packages/*.nupkg packages/*.snupkg; do
  #           dotnet nuget push "$pkg" -s "https://www.myget.org/F/yolodev/api/v3/index.json" -ss "https://www.myget.org/F/yolodev/api/v3/index.json" -k "$MYGET_KEY"
  #         done
  #       env:
  #         MYGET_KEY: ${{ secrets.MYGET_KEY }}
