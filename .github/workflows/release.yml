name: Release

on:
  workflow_run:
    workflows: [CI]
    branches: [main]
    types: [completed]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: ⏬ Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: 🔧 Setup git
        run: git branch -D main || true; git checkout -b main

      - name: 🔽 Install dotnet
        uses: actions/setup-dotnet@v1

      - name: 🔽 Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.11
        with:
          versionSpec: "5.x"

      - name: 🔍 Print dotnet info
        run: dotnet --info

      - name: 🔍 Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.11
        with:
          useConfigFile: true

      - name: 🔽 Restore
        run: dotnet restore -p:Configuration=Release

      - name: 🔨 Build
        run: dotnet build --configuration Release

      - name: 📦 Pack
        run: dotnet pack --configuration Release --no-build

      - name: 🔼 Upload packages as artifact
        uses: actions/upload-artifact@v2
        with:
          name: nuget
          path: artifacts/nuget/

      - name: 🔼 Upload global.json as artifact
        uses: actions/upload-artifact@v2
        with:
          name: global-json
          path: global.json

    outputs:
      version: ${{ steps.gitversion.outputs.fullSemVer }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    environment: release
    concurrency:
      group: release
      cancel-in-progress: true
    needs:
      - build

    steps:
      - name: 🏷️ Create GitHub Tag
        uses: actions/github-script@v5
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/v${{ needs.build.outputs.version }}",
              sha: "${{ github.event.workflow_run.head_sha }}",
            });

      - name: ⏬ Checkout
        uses: actions/checkout@v3
        with:
          ref: refs/tags/v${{ needs.build.outputs.version }}

      - name: 📝 Create changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔽 Download nuget artifact
        uses: actions/download-artifact@v2
        with:
          name: nuget
          path: nuget

      - name: 🖃 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          prerelease: false
          tag_name: v${{ needs.build.outputs.version }}
          body: ${{ needs.build.outputs.changelog }}
          files: |
            nuget/*.nupkg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  githubpkg:
    name: Push to GitHub Packages
    runs-on: ubuntu-latest
    permissions:
      packages: write
    needs:
      - build
      - release

    steps:
      - name: 🔽 Download nuget artifact
        uses: actions/download-artifact@v2
        with:
          name: nuget
          path: nuget

      - name: 🔽 Download global-json artifact
        uses: actions/download-artifact@v2
        with:
          name: global-json

      - name: 🔽 Install dotnet
        uses: actions/setup-dotnet@v1

      - name: 🔼 Publish package to nuget
        run: dotnet nuget push --force-english-output --api-key '${{ secrets.GITHUB_TOKEN }}' --source 'https://nuget.pkg.github.com/YoloDev/index.json' --skip-duplicate "nuget/*.nupkg"

  nuget:
    name: Push to Nuget
    runs-on: ubuntu-latest
    environment: nuget
    needs:
      - build
      - release
      - githubpkg

    steps:
      - name: 🔽 Download nuget artifact
        uses: actions/download-artifact@v2
        with:
          name: nuget
          path: nuget

      - name: 🔽 Download global-json artifact
        uses: actions/download-artifact@v2
        with:
          name: global-json

      - name: 🔽 Install dotnet
        uses: actions/setup-dotnet@v1

      - name: 🔼 Publish package to nuget
        run: dotnet nuget push --force-english-output --api-key '${{ secrets.NUGET_API_KEY }}' --source '${{ secrets.NUGET_FEED }}' --skip-duplicate "nuget/*.nupkg"
